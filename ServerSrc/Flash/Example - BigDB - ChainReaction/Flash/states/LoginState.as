package states{	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import playerio.PlayerIO;	import playerio.Client;	import playerio.PlayerIOError;	import flash.display.MovieClip;	import playerio.DatabaseObject;	import flash.events.Event;	public class LoginState extends State{		private static var _client:Client		private static var _playerobject:DatabaseObject		private static var _username:String		private var callback:Function		public function LoginState(callback:Function) {			loginbtn.addEventListener(MouseEvent.CLICK, handleLoginRequest)			this.callback = callback			//addEventListener(Event.ADDED_TO_STAGE, handleLoginRequest)		}				public static function get client():Client{			return _client;		}		public static function get username():String{			return _username;		}		public static function get playerObject():DatabaseObject{			return _playerobject;		}		private function handleLoginRequest(e:Event = null):void{						_username = username.text.replace(/[^A-Z0-9]+/gi,"");						if(_username != ""){				loginbtn.visible = false;				PlayerIO.connect(					stage, 					//Referance to stage					Config.gameId,			//Game id (Get your own at playerio.com. 1: Create user, 2:Goto admin pannel, 3:Create game, 4: Copy game id inside the "")					Config.connectionId,	//Connection id, default is public					_username,				//Username					"",						//User auth. Can be left blank if authentication is disabled on connection					null,					//Current PartnerPay partner.					handleSuccess,			//Function executed on successful connect					handleError				//Function executed if we recive an error									);			}					}				private function handleSuccess(client:Client):void{			_client = client			client.bigDB.loadMyPlayerObject(function(o:DatabaseObject):void{				_playerobject = o;				callback();			})		}						private function handleError(e:PlayerIOError):void{			loginbtn.visible = true;			trace(e)		}	}}